function [Y,Xf,Af] = ANN_60_15n(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 02-May-2020 00:34:08.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-166881;627;-105928;629];
x1_step1.gain = [6.4553820133691e-06;0.000655522779416585;8.43401437999452e-06;0.000655737704918033];
x1_step1.ymin = -1;

% Layer 1
b1 = [18.897282030017066745;7.8630167025578368012;0.23399975574387371635;-7.2229408945530533259;7.6678567766917895554;0.43926149231906697068;-1.1696166460704273682;-0.3120644515093859428;-0.90275826876554154943;-0.53395210895753031366;-0.63860140144374011317;13.852345370159575566;-6.4255033813796567088;-64.12555532525429669;-1.4070652607563784997];
IW1_1 = [22.793605258887861709 -11.807330164736155709 -6.694896554423251267 1.973391192887924861;-8.6166727629006167888 0.26973332531094312836 -1.3959460184103891223 -3.4661390179664692823;-0.96585711974990151596 0.52714305848103115704 -0.57559200615600958351 -0.6914956066883832797;8.3076671058009896598 -1.0046755313629256445 -0.7415826458787596609 3.649306507852498882;-8.4382016867646214564 0.25543519759974891992 -1.5440690492920086108 -3.3600819180524079677;-0.16817657703764263277 2.0349591854089998932 -3.4135112386940718032 -2.8009407921854747592;3.2752329967296232027 0.070581021271884925028 0.44680568484503513371 0.45104699274638943018;-2.7384649764276187689 0.43410476659257046794 0.032079677619770936847 0.2307564417703625026;-0.45207791297307092782 -0.36085113127599421912 -3.0627557738655424302 1.1544370073787610931;0.0053435885325615207347 -0.017118998723992161215 -0.0096008440447118321981 -0.033742521107576181616;0.18133979473236003233 1.0738564922196498497 -0.18889203873707363646 0.46189296610361124662;17.525441521536510692 -6.1866810618458876192 -4.4500101072083868559 -0.47605207851497971516;-5.324260040343032685 1.1208469102359881475 1.4273864115499461658 3.6580542543158034441;-118.59605608417172107 -1.3899627199269646294 22.253665957307280365 45.690052093401206434;-0.95395110664991933369 -0.75729377694899446816 0.19753808428062577529 -0.71396336217935729707];

% Layer 2
b2 = [6.7605233469652388223;-10.976485993702942423;-7.188583505618487024];
LW2_1 = [0.14095888814336668404 -4.2176675796051599221 -0.38993683315413130153 -0.34841557716857796123 4.0177340138548700565 -0.0039158685496498953429 -0.41168228456589744946 0.46393132771399819836 -0.0043208035676887074708 14.030935974473797145 0.22668661016421065568 -0.3396060693667976027 -0.049163969173953527003 0.14152074665763131334 -0.31234257936499987274;-0.24684113625012282789 -6.2883067752518133631 0.1915383004366927322 -0.49997372270361684077 5.9263807937892876154 0.054652832838806453264 -0.1348538848264033696 -0.13876558655348855686 -0.092347541416713668783 -21.506881096275655807 0.39391227876995865698 0.48857610568641324233 0.17805781239737150656 -0.11633027705112919392 -0.33252599002772209591;-1.6527903007027482385 -1.4543175471347966621 -1.6270000296402709061 -0.078488297546881927169 1.3488947621315205971 0.92637229415145927458 -0.27059221475146255642 0.17184661243094109806 0.90271907452222277524 -16.468299765288882952 -0.66970772962401203809 1.5761823299880004523 -0.023866600914802506284 0.14600733408550078951 0.74461373896628790803];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.533787165877804;0.788527964418997;2.25106301047751];
y1_step1.xoffset = [-1.82517310309568;0.576613863304083;-0.470200245018933];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
