function [Y,Xf,Af] = ANN_full_10n(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 13-May-2020 01:23:05.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-179998;622;-179972;540];
x1_step1.gain = [5.55560185223766e-06;0.000654450261780105;5.55739258254812e-06;0.000637145587766805];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.90899404525538329835;0.76820234551271804335;-3.0168282429660111532;-0.28190138193744979089;1.7221113533330449918;3.6653101970034338564;-0.62878959849219129286;8.7898925817632544977;0.79621557744804893897;0.37424375680231042329];
IW1_1 = [0.78111677985220928644 1.4883517095828744381 -0.07465083179137028957 -2.8778914196027711725;0.3739304515692907227 1.0171283911490998086 0.24886559324836191043 -2.287563859490003626;3.8470956260783961689 -19.735656795545136077 -0.84324309195188085209 17.548849383368452237;-0.96667095800983537934 -1.4813714291131534484 1.5283693469159802536 1.409358667652298891;-0.95312381939911638984 -29.270930279359962611 -2.3058111534746430493 29.77942014820794725;0.23294211249071944403 -6.1538282929940137933 -14.502661293798436049 7.7324590011631091357;-0.24650096544023611389 0.63404401375118202289 0.35346317070205185429 -0.84131808545738506755;10.510328361639503569 -4.5380098208019328254 11.215676559855827676 4.6400442871267459921;0.26366003357878847746 0.59826488732385219027 0.70095698195051214796 -2.0400386537535371012;0.9199860390085000672 0.68393990363198253757 -1.2979122021985585178 -0.53983589160639611215];

% Layer 2
b2 = [-2.4066913412359056679;2.1076772134277108606;-1.0871609846647747322];
LW2_1 = [-8.2916532895909114131 18.922296510242741618 -0.46029295596668290402 3.9569034921788923675 -0.19477671670892765521 0.25846047147213030426 -1.406213313362028261 0.40596271889889679052 -9.0545705603679298434 3.7267615061593182268;1.3935072758812081517 -3.7619527690188907521 -0.11180305135773686842 4.6352930437572181788 0.42979637653006796949 0.27502871698500330755 5.8218697828712757669 0.36548542687988871958 1.1621599060488028154 6.4701489659359756601;-0.54039291508286535493 2.3567899932648641581 0.088354934488070968612 -6.2050602502588043663 0.036588802718661016244 0.16923367800936378602 -3.2414701313084015588 0.13421576255053077609 -1.5907554818427624976 -7.4035957481675991332];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.533787165877804;0.460242512747554;2.25106301047751];
y1_step1.xoffset = [-1.82517310309568;-1.23254956773967;-0.470200245018933];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
