function [Y,Xf,Af] = ANN_60_10n(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 02-May-2020 00:32:33.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx4 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-166881;627;-105928;629];
x1_step1.gain = [6.4553820133691e-06;0.000655522779416585;8.43401437999452e-06;0.000655737704918033];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.11429058269204887821;-1.5287633350887799288;1.1346229971579127049;0.10448670237741383704;-1.1152444741121034788;-0.22181504734494680853;-0.629019386904203337;2.1754755799890106438;1.2243748596705639198;-0.91836045399562671321];
IW1_1 = [0.5381072878189245845 -0.19350511718657659177 -0.11215229987275875112 -0.17591561461987711978;-0.80335925850002076753 0.18168577727656523568 0.084486559694141996624 0.15066535778075473839;-0.84085744761364944466 -1.1217253512129361503 -0.091200896175934062504 -0.40316671956028554691;0.36990654635102437897 -0.21366641064904881575 -0.064763309443010785849 -0.16307807770227347732;0.86856105630131219542 1.0165597375413935044 0.089445547616166021232 0.42309925292034739064;-0.90405615274836925721 0.088043179567642557148 0.11413669145313645736 0.09261602723321481212;0.025966411614816567455 0.31206125186106614677 -0.26256466671823197601 0.0091431670072433853663;2.4240392571443312164 -0.28483157888696197801 -0.26624120898856079576 -0.482125307470633091;0.080914598658150108101 -2.1160994970882387456 2.4316902908272703954 2.0588953997125769568;-0.15209712107725414931 1.5288694454123030741 -2.1198161697729251962 -1.2777612636850597116];

% Layer 2
b2 = [-22.097294639162360141;15.241439237065048218;1.9964756113681711991];
LW2_1 = [18.050763002479882857 -31.861384728609298378 -9.4997152979286525465 -21.871854597546079191 -10.540445294265882836 6.9736667859760350652 -3.2653668048765376319 -3.641415162775120784 0.41466742593606148448 0.57040771038223692102;-14.331945351817973133 21.610361808677481577 -6.3971848358524363576 13.596520716372378246 -7.0818143763897305476 -6.3881194509520486946 6.1779959344852999337 2.9136450975125205431 -0.850954875331255578 -1.4169998184689795995;-4.479598141029366154 -1.2327895641590802533 1.5866094808271777872 10.89319078747368863 1.2981902264987355 1.7827769722567787802 7.3479776025802445716 -0.86244090232289227771 3.8615991554035438149 4.2463131129626496829];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.533787165877804;0.788527964418997;2.25106301047751];
y1_step1.xoffset = [-1.82517310309568;0.576613863304083;-0.470200245018933];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
