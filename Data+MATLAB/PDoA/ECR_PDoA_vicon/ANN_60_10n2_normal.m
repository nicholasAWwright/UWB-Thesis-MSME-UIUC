function [Y,Xf,Af] = ANN_60_10n2_normal(X,~,~)
%ANN_60_10N2_NORMAL neural network simulation function.
%
% Auto-generated by MATLAB, 13-May-2020 22:34:19.
% 
% [Y] = ANN_60_10n2_normal(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-166881;627;-105928;629];
x1_step1.gain = [6.4553820133691e-06;0.000655522779416585;8.43401437999452e-06;0.000655737704918033];
x1_step1.ymin = -1;

% Layer 1
b1 = [6.5375079317284461311;1.358476604439032398;-0.1425306941420432516;-0.77882269362229716858;-0.36654649630761398926;0.25100833996106469703;1.0329488704973497359;-2.264638068225668821;2.3110411200391838271;1.6745325796479340053];
IW1_1 = [0.069965698430938097485 4.0337575219779697733 -0.48567899882983706084 6.3581635854302165356;-1.9249229019040585698 -0.53872039688001394087 -0.35295606972666310197 -0.39902318065663799906;0.72082088853790926564 -0.6226459759429164853 -0.029026824503749847073 -0.25133888023410233536;-0.33603555508248195149 -1.0339549456647354475 -2.3696546022823423705 1.6830862543095270745;0.02587898635994917429 -0.10959315291603614895 2.0734958291918914597 0.55425247463999582909;-0.03980741584777067188 -0.13066865550744843905 -0.27633386872870080442 -0.098027493056441122876;0.91719426202380871516 -0.19683158631152586349 -0.12056538078016487692 0.34978753170693233088;-2.2043050300698627808 -1.7717321312737501771 0.13948931806578634962 4.3448870500375846859;2.0783615464176294907 0.98060184007955342178 -0.14064539797552769174 -3.6503214152495320199;0.97751977359874986373 -0.076626791776950892165 -0.18156566562228571016 0.67782567490949829914];

% Layer 2
b2 = [-0.96515792118040888425;-0.51521563472256015626;2.9670934653717933038];
LW2_1 = [-0.067675915590320046 0.50172480844866396144 -0.20247099490141851064 -0.063871472242047630519 0.0975234897144257179 0.67428754072036789502 -2.2922881722712049601 -0.11231596041742558656 -0.29574658773084294694 2.5619207273828563665;0.08383996197712706433 0.29465900669878281048 -1.4429715657697419484 -0.077803413435117457775 -0.13918053132764443558 -0.70284278880750372664 3.9726322891354621802 -1.4678453878437878188 -1.6265875685822459573 -2.8326999356672781794;-0.14089750848350726664 0.42600390589226477811 2.292543332123959221 1.3565787666345772156 -2.0560925879111029424 -10.289527170537501988 -5.7559160027445521735 -3.4902962853791317244 -2.921836182533970927 3.808382485873808676];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.533787165877804;0.788527964418997;2.25106301047751];
y1_step1.xoffset = [-1.82517310309568;0.576613863304083;-0.470200245018933];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
