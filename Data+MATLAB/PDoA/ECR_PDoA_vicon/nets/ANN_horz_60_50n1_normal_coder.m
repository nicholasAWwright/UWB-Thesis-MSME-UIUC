function [y1] = ANN_horz_60_50n1_normal_coder(x1)
%ANN_HORZ_60_50N1_NORMAL_CODER neural network simulation function.
%
% Auto-generated by MATLAB, 27-May-2020 18:55:56.
% 
% [y1] = ANN_horz_60_50n1_normal_coder(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -166881;
x1_step1.gain = 6.4553820133691e-06;
x1_step1.ymin = -1;

% Layer 1
b1 = [69.896235057343034214;66.452627225209681683;-64.232248054320521646;-60.373723756041783872;-59.447808253890705998;56.381393945488177621;-52.72222903993229437;-49.574362236620046929;46.95255946644763867;-43.91738988980056746;40.822926505223861682;39.16103191477559875;-37.093750661091448251;-33.017133347193350801;-30.55747001966161136;-27.229665254657284379;25.031466914428850856;-22.311909515851461094;-19.660591759963320868;-17.190615576537695119;-12.30347549014129882;-10.142569091555477812;7.98438190085929822;-4.827351566141315331;1.6983526917151221536;1.6971649840167872814;-4.6838752149867168839;-6.8582076992861775722;-10.169870107115970725;-14.028673768588973303;14.785517455973781864;18.727798093035683991;-22.182585216731393274;25.141787188562730648;-27.79211938566133;-29.353694301755155038;-32.906428387055939311;35.169987385925651324;38.08330010045880698;-40.485378867603685649;-44.006355917893458241;-46.53890310983905465;49.717263360183117982;52.949688808488033942;56.111172772106783668;-58.20263960735253761;60.645015626296519429;64.049189885705715142;-67.123491749586477795;-70.129794508269611697];
IW1_1 = [-70.101353590610642641;-70.63799708011468681;70.051635413500960681;70.942098070032656665;69.299634060623375831;-69.423291017368967459;69.019556259197770487;69.205381255240695282;-69.673282228252233494;69.983792663115082178;-70.300576209808127714;-69.348629951300608809;69.248447939673440032;69.944024170420107112;69.931604290401210733;70.137209422932102143;-69.774753961336728025;69.689345420966645861;69.598393050356733625;69.584515926525384089;70.065319265212721689;69.680052597566799477;-69.917487693814976524;69.963306782523559946;-69.989522266320506105;69.991446646037999813;-69.974904020514784975;-69.974292808777761365;-69.972744169844474982;-69.781290916720024597;70.17099027157685498;69.90206225387883876;-69.733761598392504766;69.482872545410344856;-70.247376151243997811;-70.249197002592225658;-70.413378727083141939;70.480511526243745379;70.232642598665506739;-70.452400128073975338;-70.473121796530804772;-70.800203076849967943;69.998984497453193399;69.417523604705152707;69.383278492599401943;-70.120416168070136109;70.657198235660416685;70.214059701921669898;-70.016868488671349269;-69.870147586851217625];

% Layer 2
b2 = 0.25271095727618658744;
LW2_1 = [-0.2818831647156818665 0.0078071849719155862052 0.024830576993094349847 0.0023217263147599902923 0.036056968115378125461 -0.029976443600463541922 0.028283794934056430415 0.029125611970471827067 -0.022051528152501668339 0.018559125973650801578 -0.0025242440630524123901 -0.035948932708663859648 0.0064583744123883086302 0.013241681922942182686 0.022389409261346110425 0.013120570652336804168 -0.014884151427868202652 0.0270906936914280215 0.0071802954288995102586 0.0068251976471366583576 0.0076241380276570024782 0.0855228200916934439 -0.00081696122932838196803 -0.00040575502024013090831 -0.0015842108307478172842 0.0036007959753495870706 0.0074451771874237777579 -0.089515159672400326785 0.00068126488133060767068 0.00018058705702159042264 0.0064355473259973599784 0.016661836480867223825 -0.019592940917144800739 0.021588293004662830604 -0.03389917866875120922 0.0018200942778590538731 -0.014461801651851473663 0.015366464729099478526 0.026615035726300237395 -0.022466403453753787389 -0.035376796212216246595 -0.023035770010374458788 0.011300710327383561501 0.027216244894355957895 0.030888618698428890741 -0.012062642848707149854 0.012666480466635423804 -0.00092921492938814124595 -0.0037646184237479772029 0.013628638305644869];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0149076572882655;
y1_step1.xoffset = -64.3649297385139;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
