function [Y,Xf,Af] = ANN_60_10n3_normal_compiler(X,~,~)
%ANN_60_10N3_NORMAL_COMPILER neural network simulation function.
%
% Auto-generated by MATLAB, 13-May-2020 22:34:44.
% 
% [Y] = ANN_60_10n3_normal_compiler(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-166881;627;-105928;629];
x1_step1.gain = [6.4553820133691e-06;0.000655522779416585;8.43401437999452e-06;0.000655737704918033];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.0988725828436718412;1.1975445217942528586;-0.38029490282298922255;-0.54502857472980281717;1.2268215487387836848;0.17053341452014555979;-0.58352641472112032339;-0.57518248707849795043;6.5415286017090581439;7.5195116351096986662];
IW1_1 = [-0.47200016344765782783 -1.5802422334279411231 -2.0592465490851852294 1.8146183912543820682;-0.94493119487184207284 0.33807227604919576347 0.22560634627932463214 0.20435043932507498954;0.56771705146151385524 2.5998546530112669473 2.4525544699765395862 -2.8047480464386884691;0.68234206223503268696 -0.25848217185087307701 -0.14816117519147126158 -0.013908653218473959398;-0.11868387680148513585 -1.4176744543893526895 -0.27500271443859913845 -0.064022779097127918702;-1.3287200273931549788 0.98622570211307691856 0.45449743654306518081 -0.34604915321684720508;0.3863527550098542207 1.5358705601514397454 1.8426234267706562697 -1.6023086536947965808;-0.98981671635151657895 -0.34573394506900745338 -0.065252180981697285866 -0.06411623061868020057;8.6861605868611242443 -9.8496491285618983369 -2.0932482845466080512 5.6451907693516885089;10.095806956533802889 -10.611071662289623063 -2.3979429584396076969 5.8049992043460685309];

% Layer 2
b2 = [-0.30141286584939358528;-1.6699616769116978343;0.7067927144290946373];
LW2_1 = [0.14883819098252504265 -5.3774988264286545103 -0.16404284590666357024 -9.0665490465996025904 0.41787136198361019002 -1.4257404965162732147 0.33067756502084416637 -0.48455010802042197682 -0.18740333598400021886 0.11904314200110767408;-0.26733266958421891824 -0.10654519482756732995 0.37551217666364916647 -2.2844078636216833544 -0.405760470290108477 0.022641187650204536164 -1.023929139017379919 -1.7270866295011195746 -0.030401133742518543501 0.1329209616825035023;-7.6352115839993990321 6.2199615380952817389 4.3889340745029832291 10.171150076456955347 -0.21841657323715887862 2.4304376014152380137 -13.532922373844927577 0.13837398321378410748 -7.6700228211688497026 7.142173480410198394];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.533787165877804;0.788527964418997;2.25106301047751];
y1_step1.xoffset = [-1.82517310309568;0.576613863304083;-0.470200245018933];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
